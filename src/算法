
### 排序算法

#### 1. 交换排序算法
	common ：
	len;
	a[len];
	less(s, d); 比较
	swap(s, d); 交换

	1）. 插入排序
	```
	public static void insertionSort(int[] arr){
        int len = arr.length;
        for(int i=1; i < len ; i++){
            for(int j = i; j - 1>=0; j--){
                if(SortUtil.less(arr[j],arr[j-1])){
                    SortUtil.exch(arr, j, j-1);
                }
            }
        }
    }
	```

	2）. 选择排序

    ```
    public static void selectionSort(int[] arr){
            int len = arr.length;
            for(int i=0 ; i< len-1; i++){
                int min = i;
                for(int j = i + 1; j< len; j++){
                    if(SortUtil.less(arr[j],arr[min])){
                        min = j;
                    }
                }
                SortUtil.exch(arr, i, min);
            }
        }

        /**
         * 手写
         * @param arr
         */
        public static void selectionSort2(int[] arr){
            int len = arr.length;
            for(int i=0 ; i< len-1; i++){
                for(int j = i + 1; j< len; j++){
                    if(SortUtil.less(arr[j],arr[i])){
                        SortUtil.exch(arr, j, i);
                    }
                }
            }
        }
    ```
    (1) 中涉及到多次交换操作 ， （2）只记录最小值的下标
    3）. 希尔排序 （插入排序中涉及到大量的移位操作，希尔排序的思想就是在以步长为1进行排序之前，先按照不同的步长对数组进行排序，使数据基本有序，减少移位操作）
	```
	int shell = len / 2;
	while(shell<= 1){
		for(int i = shell ; i < len ; i = i + shell){
			for(int j = shell ; j>=0; j = j-shell){
				if(less(a[i], a[j])){
					swap(a[i],a[j]);
				}
			}
		}
		shell = shell / 2;
	}
	 public static void shellSort(int[] arr){
        int len = arr.length;
        int shell = 1;
        while (shell < len / 3) {
            shell = 3*shell + 1;
        }
        while(shell >= 1){
            for(int i = shell ; i < len ; i = i + shell){
                for(int j = i ; j - shell >= 0; j -= shell){
                    if(SortUtil.less(arr[j], arr[j - shell])){
                        SortUtil.exch(arr, j, j - shell);
                    }
                }
            }
            shell = shell / 3;
        }
    }
    ```

    4). 快速排序
	```
	int partition(a[len],from ,to){
		if(from == to) return from;
		int p = a[from]
		int low = from + 1;
		int high = to;
		while(true){
			while(low < high){
				if(less(a[low], p)){
					low++;
				}else{
					break;
				}
				if(low == high){
					return high;
				}
			}
			while(low < high){
				if(less(p, a[high])){
					high--;
				}else{
					break;
				}
				if(low == high){
					return low;
				}
			}
			if(low != high){
				swap(a[low],a[high]);
			}else{
				return low;
			}
		}
	}
	sort(a[len],fromIndex,toIndex){
		int p = partition(a[len],from ,to);
		sort(a[len],0, p-1);
		sort(a[len],p+1, len);
	}
	void quickSort(a[len]){
		a[len] = randomSort(a[len]);
		sort(a[len],0,len-1);
	}

	public static int partition(int[] arr, int from, int to) {
        int p = arr[from];
        int low = from + 1;
        int high = to;
        while (true) {
            while (SortUtil.less(arr[low], p)) {
                if (low == to) {
                    break;
                }
                low++;
            }
            while (SortUtil.less(p, arr[high])) {
                if (from == high) {
                    break;
                }
                high--;
            }
            if (low >= high) {
                break;
            }
            SortUtil.exch(arr, low, high);
        }
        SortUtil.exch(arr, from, high);
        return high;
    }

    /**
     * 手写
     * @param arr
     * @param from
     * @param to
     * @return
     */
    public static int partition2(int[] arr, int from, int to) {
        if(from == to) {
            return from;
        }
        int p = arr[from];
        int low = from + 1;
        int high = to;
        while(true){
            while(low <= to){
                if(SortUtil.less(arr[low], p)){
                    low++;
                }else{
                    break;
                }
                if(low == to){
                    return high;
                }
            }
            while(from <= high){
                if(SortUtil.less(p, arr[high])){
                    high--;
                }else{
                    break;
                }
                if(from == high){
                    return low;
                }
            }
            if(low != high){
                SortUtil.exch(arr, low ,high);
            }else{
                return low;
            }
        }

    }
    public static void sort(int[] arr, int fromIndex, int toIndex) {
        if (toIndex <= fromIndex) {
            return;
        }
        int p = partition2(arr, fromIndex, toIndex);
        sort(arr, fromIndex, p - 1);
        sort(arr, p + 1, toIndex);
    }

    public static void quickSort(int[] arr) {
        //TODO 快速排序前先对带排序的结合进行随机洗牌，让顺序更随机
        sort(arr, 0, arr.length - 1);
    }
    ```
    5）. 归并排序（使用额外空间）
	```
	| 拓展 ： 多路归并
	void mergeSort(a[len]){
		int mid = len / 2 + 1;
	}
	void sort(a[len], low , high){
		int mid = len / 2 + 1;


	}
	void merge(a[len]){

	}

	public static void merge(int[] srcArr, int[] destArr, int low, int mid, int high) {
        for(int k = low ; k <= high; k++){
            destArr[k] = srcArr[k];
        }
        int i = low, j = mid + 1;
        for (int k = low; k <= high; k++) {
            if (i > mid) {
                srcArr[k] = destArr[j++];
            } else if (j > high) {
                srcArr[k] = destArr[i++];
            } else if (SortUtil.less(destArr[j], destArr[i])) {
                srcArr[k] = destArr[j++];
            } else {
                srcArr[k] = destArr[i++];
            }
        }
    }

    public static void sort(int[] srcArr, int[] destArr, int low, int high) {
        if (high <= low) {
            return;
        }
        int mid = low + (high - low) / 2;
        sort(srcArr, destArr, low, mid);
        sort(srcArr, destArr, mid + 1, high);
        merge(srcArr, destArr, low, mid, high);
    }

    public static void mergeSort(int[] arr) {
        int[] destArr = new int[arr.length];
        sort(arr, destArr, 0, arr.length - 1);
    }
    6）. 堆排序

    7）. 冒泡排序

    8）. 基数排序
    ```


#### 2. 线性排序算法
    ```
    1） 桶排序
    ```


### 查找算法

1. 二分查找（有序表查找）
2. 顺序查找（顺序表查找）
3. 二叉树（二叉排序树，AVL， B-， B+， 2-3树， 红黑树）（动态查找）

3. 块内无序，块间有序（分块查找，先二分查找定位到块，然后在块中顺序查找）

4. 哈希表


### 基础算法
1. HASH
2. 快排
3. BFS/DFS
4. 红黑树
5. KMP字符串匹配算法
6. DP（动态规划）
7. A* 寻路算法：求最短路径
8. Dijkstra： 最短路径算法
9. 遗传算法
10. 启发式搜索
11. 图像特征提起SIFT算法
12. 傅立叶变换
13. SPFA（shortest path faster algorithm） 单元最短路径算法

### 海量数据处理
1. Hash映射/分而治之
2. Bitmap
3. Bloom filter
4. Trie树
5. 数据库索引
6. 倒排索引
7. 双层桶划分
8. simhash算法
9. MapReduce

### 算法设计
1. 迭代法
2. 穷举搜索
3. 递推
4. 动态规则
5. 回溯
6. 分治

### 遍历

1. 深度优先遍历

2. 广度优先遍历


### 链表反转


### 二分查找


#### 不使用除法，计算除法算式


### 先手获胜



### 链表
1. 单向链表
2. 双向链表

### 哈希表/散列表
1. 散列函数
2. 碰撞处理

### 字符串算法
1. 排序
2. 查找
	1） BF算法
	2） KMP算法
	3） BM算法
3. 正则表达式
4. 数据压缩

### 二叉树
1. 二叉树
2. 二叉查找树
3. 伸展树（分裂树）
4. 平衡二叉树（AVL）
5. 红黑树
6. B树，B+树
7. R树
8. Trie树（前缀树）
9. 后缀树
10. 最优二叉树（赫夫曼树）
11. 二叉堆（大根队，小根堆）
12. 二项树
13. 二项堆
14. 斐波那契堆

### 图的算法
1. 图的数据结构（创建，遍历，删除，新增）
2. 最小生成树
3. 拓扑排序
4. 关键路径
5. 最短路径（Floyd， Dijkstra， bellman-ford，spfa）
